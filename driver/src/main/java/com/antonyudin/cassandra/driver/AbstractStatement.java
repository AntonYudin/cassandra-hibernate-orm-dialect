
/*
 * Copyright Anton Yudin, https://antonyudin.com/software
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * vim: set nowrap:
 *
 */
 
package com.antonyudin.cassandra.driver;


import java.util.logging.Logger;

import java.sql.SQLException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLWarning;



public abstract class AbstractStatement implements java.sql.Statement {

	private final static Logger logger = Logger.getLogger(AbstractStatement.class.getName());

	@Override
	public ResultSet executeQuery(final String sql) throws SQLException {
		throw notImplemented();
	}

	@Override
	public int executeUpdate(final String sql) throws SQLException {
		throw notImplemented();
	}

	@Override
	public void close() throws SQLException {
		throw notImplemented();
	}

	@Override
	public int getMaxFieldSize() throws SQLException {
		throw notImplemented();
	}

	@Override
	public void setMaxFieldSize(final int max) throws SQLException {
		throw notImplemented();
	}

	@Override
	public int getMaxRows() throws SQLException {
		throw notImplemented();
	}

	@Override
	public void setMaxRows(final int max) throws SQLException {
		throw notImplemented();
	}

	@Override
	public void setEscapeProcessing(final boolean enable) throws SQLException {
		throw notImplemented();
	}

	@Override
	public int getQueryTimeout() throws SQLException {
		throw notImplemented();
	}

	@Override
	public void setQueryTimeout(final int seconds) throws SQLException {
		throw notImplemented();
	}

	@Override
	public void cancel() throws SQLException {
		throw notImplemented();
	}

	@Override
	public SQLWarning getWarnings() throws SQLException {
		throw notImplemented();
	}

	@Override
	public void clearWarnings() throws SQLException {
		throw notImplemented();
	}

	@Override
	public void setCursorName(final String name) throws SQLException {
		throw notImplemented();
	}

	@Override
	public boolean execute(final String sql) throws SQLException {
		throw notImplemented();
	}

	@Override
	public ResultSet getResultSet() throws SQLException {
		throw notImplemented();
	}

	@Override
	public int getUpdateCount() throws SQLException {
		throw notImplemented();
	}

	@Override
	public boolean getMoreResults() throws SQLException {
		throw notImplemented();
	}

	@Override
	public void setFetchDirection(final int direction) throws SQLException {
		throw notImplemented();
	}

	@Override
	public int getFetchDirection() throws SQLException {
		throw notImplemented();
	}

	@Override
	public void setFetchSize(final int rows) throws SQLException {
		throw notImplemented();
	}

	@Override
	public int getFetchSize() throws SQLException {
		throw notImplemented();
	}

	@Override
	public int getResultSetConcurrency() throws SQLException {
		throw notImplemented();
	}

	@Override
	public int getResultSetType()  throws SQLException {
		throw notImplemented();
	}

	@Override
	public void addBatch(final String sql) throws SQLException {
		throw notImplemented();
	}

	@Override
	public void clearBatch() throws SQLException {
		throw notImplemented();
	}

	@Override
	public int[] executeBatch() throws SQLException {
		throw notImplemented();
	}

	@Override
	public Connection getConnection()  throws SQLException {
		throw notImplemented();
	}

	@Override
	public boolean getMoreResults(final int current) throws SQLException {
		throw notImplemented();
	}

	@Override
	public ResultSet getGeneratedKeys() throws SQLException {
		throw notImplemented();
	}

	@Override
	public int executeUpdate(final String sql, final int autoGeneratedKeys) throws SQLException {
		throw notImplemented();
	}

	@Override
	public int executeUpdate(final String sql, final int columnIndexes[]) throws SQLException {
		throw notImplemented();
	}

	@Override
	public int executeUpdate(final String sql, final String columnNames[]) throws SQLException {
		throw notImplemented();
	}

	@Override
	public boolean execute(final String sql, final int autoGeneratedKeys) throws SQLException {
		throw notImplemented();
	}

	@Override
	public boolean execute(final String sql, final int columnIndexes[]) throws SQLException {
		throw notImplemented();
	}

	@Override
	public boolean execute(final String sql, final String columnNames[]) throws SQLException {
		throw notImplemented();
	}

	@Override
	public int getResultSetHoldability() throws SQLException {
		throw notImplemented();
	}

	@Override
	public boolean isClosed() throws SQLException {
		throw notImplemented();
	}

	@Override
        public void setPoolable(final boolean poolable) throws SQLException {
		throw notImplemented();
	}

	@Override
        public boolean isPoolable() throws SQLException {
		throw notImplemented();
	}

	@Override
	public void closeOnCompletion() throws SQLException {
		throw notImplemented();
	}

	@Override
	public boolean isCloseOnCompletion() throws SQLException {
		throw notImplemented();
	}

	@Override
	public boolean isWrapperFor(final java.lang.Class<?> clazz) throws SQLException {
		throw notImplemented();
	}

	@Override
	public <T> T unwrap(final java.lang.Class<T> clazz) throws SQLException {
		throw notImplemented();
	}

	protected UnsupportedOperationException notImplemented() throws UnsupportedOperationException {
		try {
			throw new UnsupportedOperationException("not implemented yet");
		} catch (UnsupportedOperationException exception) {
			exception.printStackTrace(System.err);
			return exception;
		}
	}

}

